{"config":{"indexing":"full","lang":["es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prueba","title":"\u00cdndice"},{"location":"T1/ArqWeb/","text":"","title":"Tema 1"},{"location":"T3/P3.1-Tomcat/","text":"Pr\u00e1ctica 3.1: Instalaci\u00f3n de Tomcat Introducci\u00f3n Si consultamos el apartado de versiones de Tomcat en su p\u00e1gina oficial, nos daremos cuenta de que no vamos a usar la \u00faltima versi\u00f3n, la 10, para esta pr\u00e1ctica, sino la anterior, la 9. La pregunta es casi inevitable: \u00bfPor qu\u00e9? En el enlace anterior vemos como desde su versi\u00f3n 9, Tomcat da soporta a Java 8 y superiores. Sin embargo, a partir de la versi\u00f3n 10.1.x, da soporte a Java 11 y superiores. \u00bfQu\u00e9 significa esto? En Java 9 se introdujeron novedades como un nuevo sistema de m\u00f3dulos (Jigsaw), entre otras . En Java 11 se dio un paso m\u00e1s al haber renombrado completamente las rutas de paquetes javax. a jakarta. . Oracle, a pesar de haber hecho p\u00fablico el desarrollo de Java, no hizo lo mismo con su nombre. As\u00ed las cosas, resulta que Java 8 puede que a d\u00eda de hoy a\u00fan sea la m\u00e1s usada en proyectos reales. Dicho esto, podr\u00eda realizarse un proceso de migraci\u00f3n de un proyecto de Java 8 a Java 11 y utilizarlo en Tomcat 10. No obstante, para Java 8 su soporte para uso comercial (pagando) acab\u00f3 en Marzo de 2022 , pero para uso no comercial sigue hasta 2030. En conclusi\u00f3n, no es raro encontrarse en el mundo real un proyecto a desplegar realizado en Java 8. Podr\u00eda realizarse una migraci\u00f3n y los conceptos de despliegue que veremos seguir\u00edan aplicando. As\u00ed las cosas, por facilidad en la realizaci\u00f3n de las pr\u00e1cticas utilizaremos Tomcat 9 y el plugin oficial de Maven para Tomcat 7 para el despliegue (luego veremos el motivo). Instalaci\u00f3n de Tomcat Esta pr\u00e1ctica es muy sencilla y va a consistir en realizar la instalaci\u00f3n del servidor de aplicaciones Tomcat 9, en una m\u00e1quina virtual corriendo Debian 11 Bullseye. Para ello, y como sugerencia, pod\u00e9is apoyaros en este tutorial online , aunque s\u00f3is libres de consultar tantas fuentes como dese\u00e9is. Obviamente, deb\u00e9is utilizar vuestro propios usuarios y contrase\u00f1a. Instalaci\u00f3n de Maven Para instalar Maven en nuestro Debian tenemos, de nuevo, dos opciones: Instalaci\u00f3n mediante gestor de paquetes APT Instalaci\u00f3n manual La primera, recomendada , es mucho m\u00e1s sencilla y automatizada (establece todos los paths y variables de entorno), aunque con la segunda se podr\u00eda conseguir un paquete m\u00e1s actualizado. Ambos m\u00e9todos vienen explicados aqu\u00ed Si decidimos seguir el primer m\u00e9todo, el m\u00e1s sencillo, vemos que es tan simple como actualizar los repositorios: sh sudo apt update E instalar Maven sh sudo apt install maven Para comprobar que todo ha ido correctamente, podemos ver la versi\u00f3n instalada de Maven: sh maven --v Configuraci\u00f3n de Maven Para poder realizar despliegues en nuestro Tomcat previamente instalado, necesitamos realizar la configuraci\u00f3n adecuada para Maven. Ya sabemos que esto en Linux significa editar los archivos de configuraci\u00f3n adecuados. Vamos a ello. En primer lugar necesitamos asegurarnos de que en el apartado anterior de la pr\u00e1ctica hemos a\u00f1adido todos los usuarios necesarios, as\u00ed como sus respectivos roles. Los roles utilizados por Tomcat vienen detallados en su documentaci\u00f3n , que merece ser consultada: En dicha documentaci\u00f3n se nos indica que, por temas de seguridad, es recomendable no otorgar los roles de manager-script o manager-jmx al mismo usuario que tenga el rol de manager-gui . Info Tendremos dos usuarios, uno para la GUI y otro exclusivamente para hacer los deploys de Maven. As\u00ed las cosas, modificamos el archivo /etc/tomcat9/tomcat-users.xml acorde a nuestras necesidades (los nombres de usuario y contrase\u00f1a deber\u00e1n ser los que elij\u00e1is para vosotros): Editar el archivo /etc/maven/settings.xml para indicarle a Maven, un identificador para el servidor sobre el que vamos a desplegar (no es m\u00e1s que un nombre, ponedle el nombre que consider\u00e9is), as\u00ed como las credenciales. Todo esto se har\u00e1 dentro del bloque servers del XML: Ahora debemos modificar el POM del proyecto para que haga referencia a que el despliegue se realice con el plugin de Maven para Tomcat. yaml theme: features: - content.code.annotate # (1) :man_raising_hand: I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. Info No existen plugins oficiales para Tomcat m\u00e1s all\u00e1 de la versi\u00f3n 7 del servidor. No obstante, el plugin para Tomcat 7 sigue funcionando correctamente con Tomcat 9. Otra opci\u00f3n ser\u00eda utilizar el plugin Cargo Donde lo que a\u00f1adimos es el bloque yaml <build> <finalName>war-deploy</finalName> <!-- (1) --> <plugins> #(1) <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.2</version> <configuration> <url>http://localhost:8080/manager/text</url> (2) <server>Tomcat.P.3.1</server> (3) <path>/myapp</path> (4) </configuration> </plugin> </plugins> </build> 1. Nombre final del ejecutable .jar que se va a generar URL del servidor Tomcat donde se har\u00e1 el despliegue. Como en nuestro caso Maven y Tomcat est\u00e1n en el mismo servidor, la URL corresponde a localhost. Esta URL debe ir seguida por /manager/text , tal y como leemos en la documentaci\u00f3n del plugin . Referencias Tutorial Tomcat I Tutorial Tomcat II Tutorial Tomcat para Ubuntu Instalaci\u00f3n Maven JSF 3.0 en Tomcat 10 con Java 11 Migraci\u00f3n de Java 8 a Java 11 Install and configure jdk11 + Tomcat + Maven under Linux system","title":"Pr\u00e1ctica 3.1 - Instalaci\u00f3n de Tomcat 10 en Debian 11"},{"location":"T3/P3.1-Tomcat/#practica-31-instalacion-de-tomcat","text":"","title":"Pr\u00e1ctica 3.1: Instalaci\u00f3n de Tomcat"},{"location":"T3/P3.1-Tomcat/#introduccion","text":"Si consultamos el apartado de versiones de Tomcat en su p\u00e1gina oficial, nos daremos cuenta de que no vamos a usar la \u00faltima versi\u00f3n, la 10, para esta pr\u00e1ctica, sino la anterior, la 9. La pregunta es casi inevitable:","title":"Introducci\u00f3n"},{"location":"T3/P3.1-Tomcat/#por-que","text":"En el enlace anterior vemos como desde su versi\u00f3n 9, Tomcat da soporta a Java 8 y superiores. Sin embargo, a partir de la versi\u00f3n 10.1.x, da soporte a Java 11 y superiores. \u00bfQu\u00e9 significa esto? En Java 9 se introdujeron novedades como un nuevo sistema de m\u00f3dulos (Jigsaw), entre otras . En Java 11 se dio un paso m\u00e1s al haber renombrado completamente las rutas de paquetes javax. a jakarta. . Oracle, a pesar de haber hecho p\u00fablico el desarrollo de Java, no hizo lo mismo con su nombre. As\u00ed las cosas, resulta que Java 8 puede que a d\u00eda de hoy a\u00fan sea la m\u00e1s usada en proyectos reales. Dicho esto, podr\u00eda realizarse un proceso de migraci\u00f3n de un proyecto de Java 8 a Java 11 y utilizarlo en Tomcat 10. No obstante, para Java 8 su soporte para uso comercial (pagando) acab\u00f3 en Marzo de 2022 , pero para uso no comercial sigue hasta 2030. En conclusi\u00f3n, no es raro encontrarse en el mundo real un proyecto a desplegar realizado en Java 8. Podr\u00eda realizarse una migraci\u00f3n y los conceptos de despliegue que veremos seguir\u00edan aplicando. As\u00ed las cosas, por facilidad en la realizaci\u00f3n de las pr\u00e1cticas utilizaremos Tomcat 9 y el plugin oficial de Maven para Tomcat 7 para el despliegue (luego veremos el motivo).","title":"\u00bfPor qu\u00e9?"},{"location":"T3/P3.1-Tomcat/#instalacion-de-tomcat","text":"Esta pr\u00e1ctica es muy sencilla y va a consistir en realizar la instalaci\u00f3n del servidor de aplicaciones Tomcat 9, en una m\u00e1quina virtual corriendo Debian 11 Bullseye. Para ello, y como sugerencia, pod\u00e9is apoyaros en este tutorial online , aunque s\u00f3is libres de consultar tantas fuentes como dese\u00e9is. Obviamente, deb\u00e9is utilizar vuestro propios usuarios y contrase\u00f1a.","title":"Instalaci\u00f3n de Tomcat"},{"location":"T3/P3.1-Tomcat/#instalacion-de-maven","text":"Para instalar Maven en nuestro Debian tenemos, de nuevo, dos opciones: Instalaci\u00f3n mediante gestor de paquetes APT Instalaci\u00f3n manual La primera, recomendada , es mucho m\u00e1s sencilla y automatizada (establece todos los paths y variables de entorno), aunque con la segunda se podr\u00eda conseguir un paquete m\u00e1s actualizado. Ambos m\u00e9todos vienen explicados aqu\u00ed Si decidimos seguir el primer m\u00e9todo, el m\u00e1s sencillo, vemos que es tan simple como actualizar los repositorios: sh sudo apt update E instalar Maven sh sudo apt install maven Para comprobar que todo ha ido correctamente, podemos ver la versi\u00f3n instalada de Maven: sh maven --v","title":"Instalaci\u00f3n de Maven"},{"location":"T3/P3.1-Tomcat/#configuracion-de-maven","text":"Para poder realizar despliegues en nuestro Tomcat previamente instalado, necesitamos realizar la configuraci\u00f3n adecuada para Maven. Ya sabemos que esto en Linux significa editar los archivos de configuraci\u00f3n adecuados. Vamos a ello. En primer lugar necesitamos asegurarnos de que en el apartado anterior de la pr\u00e1ctica hemos a\u00f1adido todos los usuarios necesarios, as\u00ed como sus respectivos roles. Los roles utilizados por Tomcat vienen detallados en su documentaci\u00f3n , que merece ser consultada: En dicha documentaci\u00f3n se nos indica que, por temas de seguridad, es recomendable no otorgar los roles de manager-script o manager-jmx al mismo usuario que tenga el rol de manager-gui . Info Tendremos dos usuarios, uno para la GUI y otro exclusivamente para hacer los deploys de Maven. As\u00ed las cosas, modificamos el archivo /etc/tomcat9/tomcat-users.xml acorde a nuestras necesidades (los nombres de usuario y contrase\u00f1a deber\u00e1n ser los que elij\u00e1is para vosotros): Editar el archivo /etc/maven/settings.xml para indicarle a Maven, un identificador para el servidor sobre el que vamos a desplegar (no es m\u00e1s que un nombre, ponedle el nombre que consider\u00e9is), as\u00ed como las credenciales. Todo esto se har\u00e1 dentro del bloque servers del XML: Ahora debemos modificar el POM del proyecto para que haga referencia a que el despliegue se realice con el plugin de Maven para Tomcat. yaml theme: features: - content.code.annotate # (1) :man_raising_hand: I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. Info No existen plugins oficiales para Tomcat m\u00e1s all\u00e1 de la versi\u00f3n 7 del servidor. No obstante, el plugin para Tomcat 7 sigue funcionando correctamente con Tomcat 9. Otra opci\u00f3n ser\u00eda utilizar el plugin Cargo Donde lo que a\u00f1adimos es el bloque yaml <build> <finalName>war-deploy</finalName> <!-- (1) --> <plugins> #(1) <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.2</version> <configuration> <url>http://localhost:8080/manager/text</url> (2) <server>Tomcat.P.3.1</server> (3) <path>/myapp</path> (4) </configuration> </plugin> </plugins> </build> 1. Nombre final del ejecutable .jar que se va a generar URL del servidor Tomcat donde se har\u00e1 el despliegue. Como en nuestro caso Maven y Tomcat est\u00e1n en el mismo servidor, la URL corresponde a localhost. Esta URL debe ir seguida por /manager/text , tal y como leemos en la documentaci\u00f3n del plugin .","title":"Configuraci\u00f3n de Maven"},{"location":"T3/P3.1-Tomcat/#referencias","text":"Tutorial Tomcat I Tutorial Tomcat II Tutorial Tomcat para Ubuntu Instalaci\u00f3n Maven JSF 3.0 en Tomcat 10 con Java 11 Migraci\u00f3n de Java 8 a Java 11 Install and configure jdk11 + Tomcat + Maven under Linux system","title":"Referencias"},{"location":"T3/ServAplic/","text":"Tema 3: Servidores de aplicaciones Introducci\u00f3n Un servidor de aplicaciones es un marco mixto de software que permite tanto la creaci\u00f3n de aplicaciones web como un entorno de servidor para ejecutarlas. A menudo puede ser una pila compleja de diferentes elementos computacionales que ejecutan tareas espec\u00edficas que necesitan trabajar como uno solo para alimentar m\u00faltiples nubes y software y aplicaciones basadas en la web. Situado entre el servidor web y el nivel de back-end del servidor de bases de datos, el servidor de aplicaciones es esencialmente un intermediario para el servidor de bases de datos y los usuarios de las aplicaciones empresariales o de consumo que soporta mediante el uso de varios protocolos e interfaces de programaci\u00f3n de aplicaciones (API). Dependiendo de lo que se instale, un servidor de aplicaciones puede clasificarse de varias maneras, como servidor web, servidor de aplicaciones de base de datos, servidor de aplicaciones de prop\u00f3sito general o servidor de aplicaciones empresariales. Es habitual que se utilice junto con un servidor web o que contenga un servidor web, por lo que ambos pueden converger y denominarse servidor de aplicaciones web. Tambi\u00e9n es lo suficientemente vers\u00e1til como para ser utilizado con otros servidores de aplicaciones simult\u00e1neamente. Los servidores de aplicaciones tambi\u00e9n pueden contener sus propias interfaces gr\u00e1ficas de usuario para su gesti\u00f3n a trav\u00e9s de PC, pero tambi\u00e9n pueden ocuparse de sus propios recursos, as\u00ed como del procesamiento de transacciones, la mensajer\u00eda, la agrupaci\u00f3n de recursos y conexiones, y la realizaci\u00f3n de tareas de seguridad. \u00bfQu\u00e9 pasa con Java? Para los requisitos de gama alta, los servidores de aplicaciones suelen contar con supervisi\u00f3n de alta disponibilidad, agrupaci\u00f3n en cl\u00fasteres, equilibrio de carga, redundancia integrada y servicios de aplicaciones distribuidas de alto rendimiento, as\u00ed como soporte para el acceso a bases de datos complicadas. Entre las plataformas de servidores de aplicaciones m\u00e1s populares est\u00e1n J2EE, WebLogic, Glassfish, JBoss Enterprise Application Platform, Apache Tomcat y Apache Geronimo, por nombrar s\u00f3lo algunas. \u00bfPor qu\u00e9 utilizar un servidor de aplicaciones? \u00bfCu\u00e1les son las ventajas? Los servidores de aplicaciones se utilizan mejor cuando es necesario integrarse con bases de datos y servidores, por ejemplo, servidores web, que ya han sido creados y forman parte de la infraestructura inform\u00e1tica existente de una organizaci\u00f3n. Una de las razones principales es que un servidor de aplicaciones puede servir como medio para proporcionar integridad al c\u00f3digo y a los datos, al tener un enfoque integrado y centralizado para mantener las aplicaciones actualizadas. No tener uno puede llevar a diferentes versiones de la misma aplicaci\u00f3n en toda la empresa, lo que a su vez podr\u00eda traer consigo problemas de compatibilidad de software. Otra raz\u00f3n fundamental para utilizar un servidor de aplicaciones es que proporciona a la empresa una capa adicional de seguridad. Al situarse entre las p\u00e1ginas web y las bases de datos, un servidor de aplicaciones ayuda a actuar como una barrera adicional contra los ciberataques de inyecci\u00f3n SQL, ya que no hay un v\u00ednculo directo entre una p\u00e1gina web y una base de datos. Esta separaci\u00f3n conlleva la necesidad de validaci\u00f3n y/o la exigencia de mostrar la l\u00f3gica de negocio, garantizando as\u00ed que el texto introducido en un formulario en un sitio web no sea explotado como una llamada SQL maliciosa. La seguridad se ve reforzada por el establecimiento de procesos de autenticaci\u00f3n centralizados y la gesti\u00f3n del acceso a los datos. El rendimiento de las aplicaciones de uso intensivo y de gran tama\u00f1o tambi\u00e9n puede ser impulsado por un servidor de aplicaciones, ya que se puede establecer un mayor control sobre el tr\u00e1fico de la red. Y la capacidad de trabajar a escala es otro factor importante a la hora de considerar el uso de un servidor de aplicaciones, ya que su capacidad de agrupar conexiones a bases de datos significa que puede ampliarse para actuar como una granja de servidores web sin necesidad de a\u00f1adir conexiones adicionales a las bases de datos subyacentes. \u00bfEn qu\u00e9 se diferencia de otros tipos de servidores? Aunque un servidor de aplicaciones y un servidor web puedan parecer similares a primera vista, en realidad son bastante diferentes. El primero se diferencia del segundo en que se ocupa de servir la l\u00f3gica de negocio a las aplicaciones a trav\u00e9s de un conjunto de protocolos. Un servidor web, en cambio, trabaja con peticiones HTTP, respondiendo y gestion\u00e1ndolas para llevar a cabo las funciones del sitio web, adem\u00e1s de alojar dicho sitio web, almacenando su contenido est\u00e1tico, como im\u00e1genes, JavaScript, CSS y p\u00e1ginas HTML. En circunstancias comunes, un servidor web puede no soportar transacciones o agrupaci\u00f3n de conexiones a bases de datos, pero puede tener caracter\u00edsticas de tolerancia a fallos y escalabilidad, incluyendo cach\u00e9, clustering y balanceo de carga. A su vez, un servidor web es diferente de un servidor de base de datos, ya que este \u00faltimo realiza tareas como el almacenamiento de datos, la manipulaci\u00f3n y el an\u00e1lisis de datos, y el archivo, entre otras tareas relacionadas con la gesti\u00f3n de datos. Estos servidores de bases de datos utilizan un sinf\u00edn de protocolos, como ODBC o JDBC, por nombrar algunos. Los servidores de bases de datos, como es l\u00f3gico, alojan bases de datos como Oracle, SQL Server, MySQL, etc. Cabe destacar que las funciones de estos servidores a menudo pueden agruparse para ofrecer una pila de servidores, con el fin de proporcionar efectivamente los subsistemas para apoyar, por ejemplo, un conjunto de software o componentes necesarios para crear una plataforma de servicios. Servidor de aplicaciones II as aplicaciones vienen en todas las formas, tama\u00f1os y casos de uso. En un mundo en el que dependemos de una serie de procesos empresariales cr\u00edticos, los servidores de aplicaciones son los ordenadores de gran potencia que proporcionan recursos de aplicaciones a los usuarios y clientes web. Los servidores de aplicaciones se sit\u00faan f\u00edsica o virtualmente entre los servidores de bases de datos que almacenan los datos de las aplicaciones y los servidores web que se comunican con los clientes. Los servidores de aplicaciones y el middleware af\u00edn son los sistemas operativos que soportan el desarrollo y la entrega de una aplicaci\u00f3n. Ya sea una aplicaci\u00f3n de escritorio, m\u00f3vil o web, los servidores de aplicaciones desempe\u00f1an un papel fundamental en la conexi\u00f3n de un mundo de dispositivos. Examinamos c\u00f3mo los servidores de aplicaciones encajan en la arquitectura de servicios de una red, c\u00f3mo los servidores de aplicaciones soportan los servidores web, las aplicaciones nativas y las aplicaciones m\u00f3viles, y el estado actual de los servidores de aplicaciones en la d\u00e9cada de 2020. Terminolog\u00eda de los servidores de aplicaciones T\u00e9rmino Descripci\u00f3n Servidor web Responsable de almacenar, procesar y entregar los datos de E/S de las p\u00e1ginas web Cliente web Punto final que intenta acceder a los recursos de la web o de la aplicaci\u00f3n HTTPS Protocolo de comunicaci\u00f3n entre el servidor web y los clientes web Servlet/JSON Lenguaje para el intercambio entre los servidores web y de aplicaciones L\u00f3gica de negocio Reglas para el almacenamiento de datos y la transferencia de recursos de la aplicaci\u00f3n Aplicaci\u00f3n Un programa de software o un sitio web unido a una base de datos El papel del servidor de aplicaciones en la arquitectura de servicios Cuando los usuarios de las aplicaciones, ya sea el personal o los clientes web, solicitan acceso a una aplicaci\u00f3n, el servidor de aplicaciones suele hacer el trabajo pesado en el backend para almacenar y procesar las solicitudes din\u00e1micas de las aplicaciones. \u00bfPor qu\u00e9 necesitamos servidores de aplicaciones? Miles de millones de clientes web hacen peticiones HTTP cada d\u00eda, esperando un acceso instant\u00e1neo a usted-nombre-la-aplicaci\u00f3n. Headspace durante la rutina de la ma\u00f1ana, Google Docs para el informe extenso, Twitter durante la pausa para el caf\u00e9, no importa la aplicaci\u00f3n en uso, est\u00e1 siendo extra\u00edda de un servidor de aplicaciones y entregada a trav\u00e9s de un servidor web. Los servidores web se encargan de servir a los clientes web peticiones HTTP con respuestas HTTP. A diferencia de los servidores de aplicaciones, el dise\u00f1o del servidor web es lo suficientemente ligero como para procesar las solicitudes de datos est\u00e1ticos de varias aplicaciones (o sitios web), manteniendo la seguridad. Las peticiones din\u00e1micas, a menudo en forma de aplicaciones, requieren asistencia adicional. Los servidores de aplicaciones optimizan el tr\u00e1fico y a\u00f1aden seguridad Para conseguir una agilidad \u00f3ptima del servidor web, no sirve gestionar tanto las peticiones HTTP de los clientes web como pasar o almacenar recursos de m\u00faltiples sitios web. Los servidores de aplicaciones llenan este vac\u00edo con un dise\u00f1o de alta potencia construido para manejar las solicitudes de contenido web din\u00e1mico. Los servidores de aplicaciones tambi\u00e9n proporcionan redundancia de programas y una capa adicional de seguridad. Una vez desplegado entre una base de datos y un servidor web, el trabajo de preservar y duplicar la arquitectura de la aplicaci\u00f3n a trav\u00e9s de la red es m\u00e1s factible. El paso adicional entre las potenciales comunicaciones web maliciosas y las joyas de la corona en el servidor de base de datos a\u00f1ade una capa de seguridad adicional. Dado que los servidores de aplicaciones pueden procesar solicitudes de l\u00f3gica empresarial, un intento de inyecci\u00f3n SQL es tambi\u00e9n mucho m\u00e1s dif\u00edcil. Las organizaciones pueden proteger a\u00fan m\u00e1s sus datos con un servidor proxy inverso colocado delante de sus bases de datos. Los servidores proxy y las VPN pueden hacer maravillas para anonimizar y encriptar la comunicaci\u00f3n para proteger a los usuarios y los datos de la empresa. \u00bfC\u00f3mo funcionan los servidores de aplicaciones? \u00bfQu\u00e9 son los servlets? Un servlet es un programa Java que se ejecuta en un servidor Web y construye o sirve p\u00e1ginas web. De esta forma se pueden construir p\u00e1ginas din\u00e1micas, basadas en diferentes fuentes variables: datos proporcionados por el usuario, fuentes de informaci\u00f3n variable (p\u00e1ginas de noticias, por ejemplo), o programas que extraigan informaci\u00f3n de bases de datos. Comparado con un CGI, un servlet es m\u00e1s sencillo de utilizar, m\u00e1s eficiente (se arranca un hilo por cada petici\u00f3n y no un proceso entero), m\u00e1s potente y portable. Con los servlets podremos, entre otras cosas, procesar, sincronizar y coordinar m\u00faltiples peticiones de clientes, reenviar peticiones a otros servlets o a otros servidores u otros. Como la mayor\u00eda de los servidores de hoy en d\u00eda, los servidores de aplicaciones contienen caracter\u00edsticas de seguridad, transacciones, servicios, clustering, diagn\u00f3sticos y bases de datos. En lo que se diferencian los servidores de aplicaciones es en su capacidad para procesar peticiones de servlets (programas Java) desde un servidor web. En la imagen anterior, se muestra el flujo general de los servidores de aplicaciones web: El cliente abre un navegador y solicita acceso a un sitio web El servidor web recibe la petici\u00f3n HTTP y responde con la p\u00e1gina web deseada El servidor web gestiona las peticiones de datos est\u00e1ticos, pero el cliente quiere utilizar una herramienta interactiva Al tratarse de una petici\u00f3n de datos din\u00e1micos, el servidor web transfiere la petici\u00f3n a un servidor de aplicaciones El servidor de aplicaciones recibe la petici\u00f3n HTTP y la convierte en una petici\u00f3n de servlet El servlet llega al servidor de la base de datos, y el servidor de aplicaciones recibe una respuesta del servlet El servidor de aplicaciones traduce la respuesta del servlet al formato HTTP para el acceso del cliente Al recibir una solicitud de servlet de un servidor web, el servidor de aplicaciones procesa la solicitud y responde al servidor web mediante la respuesta de servlet. Dado que los servidores de aplicaciones trabajan principalmente con peticiones de l\u00f3gica de negocio, el servidor web traduce la respuesta del servlet y pasa una respuesta HTTP accesible para el usuario. Servidor de aplicaciones Servidor web Dise\u00f1ado para Sirve peticiones HTTP y de otra l\u00f3gica de negocio Sirve peticiones HTTP Almacena y proporciona L\u00f3gica de negocio Contention web est\u00e1tico La utilizaci\u00f3n de los recursos es Pesada Ligera Soporta Transacciones distribuidas y Enterprise JavaBeans (EJB) Servlets, Java Server Pages (JSP y JSON Servidores de aplicaciones en la d\u00e9cada de 2020 El mercado de los servidores de aplicaciones espera crecer a una CAGR del 13,2%, pasando de cerca de 17.000 millones de d\u00f3lares en 2020 a 41.000 millones en 2026. El crecimiento continuo no es una sorpresa, ya que la conectividad a Internet y la dependencia de las aplicaciones crecen. La migraci\u00f3n a las plataformas y servicios en la nube y el auge de los dispositivos IoT son dos impulsores clave en el mercado de infraestructura de aplicaciones y middleware moderno. A esto hay que a\u00f1adir un movimiento hacia las pol\u00edticas BYOD y una fuerza de trabajo remota que depende de una mayor conectividad y eficiencia operativa. No hay que confundir el valor asignado a estos potentes m\u00f3dulos y su papel en el servicio a los clientes con recursos de aplicaciones. Servidores de aplicaciones: El mejor amigo de un servidor web Los servidores de aplicaciones son fundamentales para las exigencias actuales de interconexi\u00f3n. Las empresas, en \u00faltima instancia, est\u00e1n en deuda con los intereses de los clientes, y sin una conexi\u00f3n escalable y estable a los recursos de las aplicaciones, los clientes modernos huyen hacia las colinas. Los servidores de aplicaciones asumen el papel de conector y mejor amigo de los servidores web. Cuando los servidores web tienen una petici\u00f3n del cliente que es demasiado para soportar, los servidores de aplicaciones hacen posible mantener la comunicaci\u00f3n sin problemas con el contenido web din\u00e1mico. \u00bfQu\u00e9 es el despliegue de aplicaciones web? El despliegue en el desarrollo de software y web significa empujar los cambios o actualizaciones de un entorno de despliegue a otro. Al configurar un sitio web, siempre tendr\u00e1s tu sitio web en vivo, que se llama el entorno en vivo o entorno de producci\u00f3n. Si quieres tener la capacidad de hacer cambios sin afectar a tu sitio web en vivo, entonces puedes a\u00f1adir entornos adicionales. Estos entornos se llaman entornos de desarrollo o entornos de despliegue. Los entornos de desarrollo adicionales suelen ser un entorno local, un entorno de desarrollo y un entorno de preparaci\u00f3n (tambi\u00e9n conocido como sitio de preparaci\u00f3n). El n\u00famero de entornos que necesitas depende de ti y de la complejidad del proyecto en el que est\u00e1s trabajando. Aunque los modelos de despliegue pueden variar, el m\u00e1s com\u00fan es el cl\u00e1sico modelo de despliegue \"de izquierda a derecha\" cuando se trabaja con m\u00faltiples entornos de despliegue. En este modelo, los cambios se realizan en entornos locales, de desarrollo o de preparaci\u00f3n (dependiendo de la configuraci\u00f3n) y se empujan de izquierda a derecha a trav\u00e9s de los diferentes entornos, terminando en el entorno en vivo. Una vez completado este proceso de despliegue, los nuevos cambios ser\u00e1n visibles en el entorno activo. En la imagen anterior se muestra una forma muy simplificada y cl\u00e1sica de manejar los despliegues cuando se trabaja con sitios web en un CMS. No necesariamente se necesitan todos los entornos anteriores, pero el proceso sigue siendo el mismo. Al utilizar m\u00faltiples entornos se obtiene una lista de ventajas - la principal es que se pueden hacer cambios sin que afecten a su sitio web en vivo. Una vez que los cambios se hacen, se prueban y est\u00e1n listos para ser empujado en vivo, el proceso de despliegue se encarga del resto. \u00bfDe qu\u00e9 pasos consta el proceso despliegue? El flujo del proceso de despliegue consta de 5 pasos: Planificaci\u00f3n, desarrollo, pruebas, despliegue y supervisi\u00f3n. A continuaci\u00f3n nos adentraremos en cada uno de los 5 pasos, pero antes nos gustar\u00eda a\u00f1adir una nota r\u00e1pida. El flujo del proceso de despliegue que aparece a continuaci\u00f3n cubre los aspectos fundamentales, que se dividen en 5 pasos. Esto no significa que sea la \u00fanica manera de hacerlo - podr\u00eda haber un proceso mejor para usted. Hemos intentado mantenerlo lo m\u00e1s sencillo posible para que cubra las partes m\u00e1s importantes. Si tu situaci\u00f3n requiere pasos adicionales en el proceso, entonces deber\u00edas hacerlo. Recuerde tener un plan de despliegue de software Para asegurarse de que el proceso de despliegue se desarrolle con la mayor fluidez posible, lo mejor es tener un plan de despliegue que se siga en todo momento. Al tener un plan te aseguras de que todo se haga de la misma manera cada vez que se realicen cambios. Esto es especialmente \u00fatil cuando varios usuarios trabajan en el mismo proyecto. Un plan de despliegue debe incluir reglas sobre cu\u00e1ndo desplegar desde los entornos locales a los sitios de desarrollo o de puesta en escena, as\u00ed como horarios para cuando los nuevos cambios pueden ir a un entorno en vivo. Al tener un plan establecido, se reduce el riesgo de conflictos entre los diferentes cambios y se asegura que el proceso de despliegue sea lo m\u00e1s f\u00e1cil y fluido posible. Si est\u00e1s trabajando en un proyecto de c\u00f3digo abierto, tambi\u00e9n te da la oportunidad de hacer Release Candidates y dejar que tu comunidad lo pruebe para detectar cualquier error que puedas haber pasado por alto. Adem\u00e1s de un plan general, tambi\u00e9n es importante planificar cada uno de los cambios que vayas a realizar. Este proceso ser\u00e1 muy r\u00e1pido para los cambios menores, pero deber\u00eda ser mucho m\u00e1s extenso para los grandes cambios. Si planificas con mucha antelaci\u00f3n, estar\u00e1s mucho m\u00e1s preparado para tener un proceso de despliegue sin problemas. El desarrollo propiamente dicho Una vez que tengas el plan en marcha, es el momento de hacer el desarrollo real. Para garantizar que cualquier desarrollo pueda realizarse simult\u00e1neamente y sin romper nada, es importante trabajar \u00fanicamente en entornos locales o de desarrollo. Una vez que el proceso de desarrollo est\u00e1 hecho, es el momento de empezar a probar y desplegar los cambios a trav\u00e9s de la configuraci\u00f3n de su entorno. \u00bfNo est\u00e1s seguro de si trabajar en local o en un entorno de desarrollo? Entonces echa un vistazo a la secci\u00f3n de mejores pr\u00e1cticas de despliegue. Probar los cambios Probar los cambios es crucial para garantizar que no haya errores en el entorno de producci\u00f3n final. Pero las pruebas no pueden completarse sin desplegar los cambios en nuevos entornos. Una vez que hayas comprobado que todos los cambios funcionan en tu entorno local o de desarrollo, es el momento de desplegar los cambios en el siguiente entorno. Esto debe hacerse hasta el entorno de preparaci\u00f3n, donde se deben realizar las pruebas finales de control de calidad. Si todo est\u00e1 correctamente probado y funciona en un entorno parecido al entorno real, es el momento de desplegarlo en vivo. Si se descubren errores por el camino en cualquier entorno, es importante tener un plan para manejarlos. Por lo general, cualquier cambio que no pase las pruebas en el entorno de ensayo debe ser enviado de nuevo a la fase de desarrollo y -una vez corregido- volver a trabajar en los entornos. Desplegar los cambios en el entorno real Una vez que se han realizado todas las pruebas en los entornos anteriores y se han corregido los errores, es el momento de desplegar los cambios en el entorno real. Esto deber\u00eda ser algo bastante seguro, pero todos los que han trabajado en el desarrollo de software saben que algo puede salir mal. As\u00ed que, aunque es f\u00e1cil detenerse aqu\u00ed, es importante incluir el \u00faltimo paso del proceso: la monitorizaci\u00f3n. Supervisar los cambios Una vez que los nuevos cambios est\u00e9n en marcha y los usuarios reales utilicen activamente el sitio web o la aplicaci\u00f3n, es importante supervisar que todo funcione seg\u00fan lo previsto. Independientemente de la planificaci\u00f3n realizada, existe la posibilidad de que los usuarios se encuentren con problemas o realicen acciones que usted no hab\u00eda previsto durante la planificaci\u00f3n y el desarrollo. Un buen consejo para la monitorizaci\u00f3n es planificar los lanzamientos para los momentos en los que la menor cantidad de usuarios lo noten y en los que tengas recursos de desarrollo listos en caso de que haya que arreglar algo. De este modo, el n\u00famero de usuarios afectados por cualquier error ser\u00e1 m\u00ednimo y tendr\u00e1s gente preparada para arreglarlo o revertir los cambios si es necesario. Si tienes que revertir los cambios, es importante mantener la calma y tener un proceso para manejarlo con la misma minuciosidad con la que manejas los despliegues. Diferentes tipos de despliegue Cuando se trata del tipo de despliegue, a menudo se divide en dos partes. Por lo general, se dividir\u00e1 entre metadatos y contenido, ya que estos tienen diferentes impactos en un nuevo entorno y deben ser manejados de manera diferente. Despliegue de metadatos Los metadatos incluyen los cambios en el c\u00f3digo, las plantillas, las hojas de estilo, los archivos, etc. Estos cambios a menudo requerir\u00e1n una comprobaci\u00f3n de validaci\u00f3n entre entornos para ver si tienen alg\u00fan conflicto imprevisto que deba resolverse. Muchas herramientas de despliegue incluyen comprobaciones de coherencia y ayudan a guiarte en caso de conflictos. Despliegue de contenidos El contenido, como el texto, las im\u00e1genes y los v\u00eddeos, se maneja de forma diferente durante el despliegue, ya que es menos complicado moverlo entre entornos que los metadatos. Por esa raz\u00f3n, a menudo ver\u00e1s que las herramientas de despliegue hacen que el despliegue de contenido sea accesible para los editores de contenido y no s\u00f3lo para los desarrolladores. De esta manera, un editor de contenidos no depende de un desarrollador cuando se trata de enviar nuevos contenidos a un entorno activo. Mejores pr\u00e1cticas de despliegue Cuando se trabaja con entornos de despliegue, es importante, como se ha mencionado anteriormente, tener un plan y un proceso claro para ello en su equipo. Para ampliar ese proceso hemos reunido algunas mejores pr\u00e1cticas que son buenas para implementar como parte de su proceso. Ten en cuenta que las siguientes pr\u00e1cticas recomendadas se refieren principalmente al desarrollo de software y de la web. Si est\u00e1s haciendo otros tipos de desarrollo puede haber otras cosas a considerar en tu flujo de trabajo de despliegue. Utiliza Git Esto puede parecer obvio, pero tener un sistema de control de versiones es inestimable para cualquier flujo de trabajo de despliegue. Sin \u00e9l, es probable que se produzcan errores si se trabaja en equipo. Incluso si eres el \u00fanico desarrollador que trabaja en un proyecto, es muy recomendable utilizar Git en caso de que necesites volver a versiones anteriores o si alguien nuevo se une a tu equipo. Sin Git ser\u00e1 dif\u00edcil asegurar la consistencia en tu flujo de trabajo de despliegue y puede llevar a que se cometan m\u00e1s errores por desplegar c\u00f3digo inacabado o por no tener a todos los miembros del equipo trabajando en la misma versi\u00f3n del c\u00f3digo. Trabajar en ramas Como regla general, tu equipo deber\u00eda trabajar en ramas. Hacerlo as\u00ed permitir\u00e1 trabajar en varias cosas al mismo tiempo sin que se afecten entre s\u00ed. Un ejemplo es cuando se encuentra un error que debe ser corregido. Si un desarrollador est\u00e1 utilizando una rama para trabajar en una nueva caracter\u00edstica, puede hacer r\u00e1pidamente una nueva rama del entorno de desarrollo para trabajar en el error. De este modo, habr\u00e1 dos ramas diferentes que no chocar\u00e1n ni crear\u00e1n posibles conflictos de fusi\u00f3n m\u00e1s adelante. Trabajar con ramas tambi\u00e9n ayuda a tu equipo de preguntas y respuestas a la hora de desplegar en un entorno de preparaci\u00f3n. Tener los cambios en ramas separadas y fusionarlas dar\u00e1 a los probadores una mejor visi\u00f3n de lo que se empuj\u00f3 y lo que deben probar. Utiliza un entorno local como entorno de desarrollo Aunque es posible trabajar directamente en un entorno de desarrollo, en la mayor\u00eda de los casos se ahorrar\u00e1 mucho tiempo trabajando localmente. Al instalar el sitio web o el software de forma local, podr\u00e1s trabajar de forma m\u00e1s eficiente y acelerar las pruebas y la verificaci\u00f3n de tu c\u00f3digo. El \u00fanico inconveniente de trabajar en local es que tienes que instalar el sitio web o el software en tu m\u00e1quina. Pero el tiempo invertido en ello se recupera varias veces a largo plazo. En primer lugar, no tienes que confirmar, empujar y desplegar constantemente un cambio antes de poder verificar si funciona. Y cuando algo no funciona (esto nos pasa a todos) tendr\u00e1s que revertirlo, empujarlo de nuevo y volver a desplegarlo. En lugar de eso, puedes simplemente ejecutarlo todo localmente y, una vez que funcione como es debido, puedes empujarlo directamente al entorno de preparaci\u00f3n para una prueba m\u00e1s rigurosa. Revise las diferencias antes de desplegarlo en el entorno real Una vez que el equipo de pruebas se haya asegurado de que todo funciona en el entorno de pruebas, es el momento de desplegar el c\u00f3digo en el entorno real. Pero antes de hacer el despliegue final, es importante hacer una revisi\u00f3n final de las diferencias entre su entorno actual en vivo y el entorno de desarrollo que est\u00e1 empujando. Este paso puede parecer excesivo y a menudo puede parecer redundante, ya que no se han encontrado errores. Entonces, \u00bfpor qu\u00e9 seguimos recomendando este paso? Porque en esas pocas ocasiones en las que realmente se detect\u00f3 un error. Incluso despu\u00e9s de las pruebas exhaustivas y la garant\u00eda de calidad, las cosas pueden ir mal tan pronto como se llega al entorno real. Y una vez que eso sucede, a menudo puede ser muy estresante implementar correcciones r\u00e1pidas o hacer una reversi\u00f3n completa de la versi\u00f3n. Por lo general, querr\u00e1s evitar esto a toda costa, por lo que te recomendamos encarecidamente que hagas una revisi\u00f3n final de tu c\u00f3digo antes de pulsar el bot\u00f3n de despliegue. Tener un calendario de despliegue Como parte de tu plan de despliegue, te recomendamos encarecidamente que incluyas tambi\u00e9n un calendario de despliegue. Tener un tiempo fijo para cuando los nuevos cambios pueden ser desplegados a su entorno en vivo es una gran manera de asegurarse de que todo el mundo sabe cuando los nuevos cambios est\u00e1n llegando. Puede ser tentador tomar un proceso m\u00e1s iterativo en el que los nuevos cambios son empujados tan pronto como est\u00e1n listos. Y aunque esto puede funcionar definitivamente para algunos cambios y algunos equipos, tambi\u00e9n hay situaciones en las que esto puede tener consecuencias desafortunadas. Esto es especialmente cierto en el caso de los lanzamientos importantes, en los que es importante tener ojos y manos humanos reales listos si algo no funciona como se pretende. Y al programar los despliegues, su equipo puede planificar las tareas y las horas de trabajo en torno a estas ventanas de tiempo en las que podr\u00edan tener que ayudar con una correcci\u00f3n en caliente o una reversi\u00f3n. La frecuencia de las ventanas de despliegue y la hora del d\u00eda en que deben planificarse es algo que trataremos m\u00e1s adelante. Una \u00faltima nota: aunque tengas un calendario de despliegue, siempre es una buena idea hacer despliegues manuales en lugar de autom\u00e1ticos. Adem\u00e1s de tener a alguien que haga la \u00faltima revisi\u00f3n, tambi\u00e9n ayuda que alguien de tu equipo sepa exactamente cu\u00e1ndo y qu\u00e9 se despleg\u00f3. Considera tener grupos de usuarios con diferentes permisos Mientras que cualquier desarrollador debe ser capaz de empujar los cambios a los entornos de ensayo, puede ser una buena idea para restringir qui\u00e9n puede desplegar en vivo. Para los equipos m\u00e1s peque\u00f1os, esto puede no tener mucho sentido, ya que puede crear un cuello de botella para obtener nuevos cambios. Pero si se trata de un equipo m\u00e1s grande con un nivel de experiencia variado entre los miembros del equipo, puede ser una gran idea dejar que s\u00f3lo los desarrolladores senior desplieguen en el entorno en vivo. Esto asegura efectivamente un mayor nivel de control sobre el flujo de liberaci\u00f3n y tambi\u00e9n significa que al menos un par de ojos senior han visto lo que est\u00e1 pasando en el entorno real. Si tienes un enfoque muy iterativo con lanzamientos r\u00e1pidos, esto podr\u00eda ralentizarte. Aun as\u00ed, dado que los cambios que se empujan son normalmente m\u00e1s peque\u00f1os con este enfoque, probablemente no te ralentizar\u00e1 mucho. Y si significa detectar algunos errores m\u00e1s, el tiempo que se ahorra al no tener que corregir errores compensar\u00e1 el tiempo invertido. Hablando de romper cosas... Mantenga la calma - incluso si algo se rompe Acabas de desplegar en tu entorno de producci\u00f3n y ahora tu sitio web est\u00e1 roto. \u00bfLe resulta familiar? Desgraciadamente, estas cosas ocurren - no importa lo cuidadoso que seas. Pero en lugar de entrar en p\u00e1nico y aplicar hotfixes o retroceder inmediatamente, es importante mantener la calma y asegurarse de que lo que est\u00e1 haciendo no va a romper las cosas a\u00fan m\u00e1s. En primer lugar, deber\u00edas comprobar si es posible realizar una reversi\u00f3n y si realmente se arreglar\u00eda algo. En algunas situaciones, es posible que hayas hecho cambios que son irreversibles y que una reversi\u00f3n s\u00f3lo te causar\u00eda problemas a\u00fan mayores. Tambi\u00e9n hay que comprobar si lo que se ha roto es una caracter\u00edstica existente o nueva. De nuevo, si la cosa que se rompi\u00f3 no era parte de la nueva versi\u00f3n, probablemente no servir\u00e1 de nada hacer un rollback. As\u00ed que en lugar de entrar en p\u00e1nico, ten un plan preparado y respira hondo antes de ponerte a trabajar en la b\u00fasqueda de una soluci\u00f3n. Puede parecer sencillo, pero puede ayudarte a salir de una mala situaci\u00f3n mucho m\u00e1s r\u00e1pido que si te lanzas directamente. \u00bfA qu\u00e9 hora del d\u00eda debes desplegar los cambios? En caso de que algo se rompa al desplegar en el entorno de producci\u00f3n, es importante encontrar el mejor momento para hacerlo. Y aunque este momento var\u00eda mucho de un proyecto a otro, hay dos preguntas que puedes hacerte para determinar cu\u00e1ndo desplegar los cambios: \u00bfCu\u00e1ndo tiene la menor cantidad de usuarios activos? \u00bfCu\u00e1ndo tiene a alguien preparado para supervisar y solucionar los problemas despu\u00e9s del despliegue? \u00bfCu\u00e1ndo tiene el menor n\u00famero de usuarios activos? Por lo general, lo que quiere es que el menor n\u00famero posible de personas se vea afectado por sus nuevos cambios. Por lo tanto, como regla general, debe buscar cualquier momento del d\u00eda en el que el menor n\u00famero de usuarios est\u00e9 utilizando activamente su sitio web o software. En el caso de los sitios web, esto puede hacerse consultando las herramientas de an\u00e1lisis de datos que hayas elegido, por ejemplo, Google Analytics. All\u00ed podr\u00e1 crear informes personalizados que le muestren a qu\u00e9 hora del d\u00eda tiene menos tr\u00e1fico, as\u00ed como identificar las horas punta en las que definitivamente no deber\u00eda hacer ning\u00fan cambio. Adem\u00e1s de mirar la hora del d\u00eda, tambi\u00e9n puede valer la pena mirar c\u00f3mo se reparte la actividad de los usuarios entre los d\u00edas de la semana. Este an\u00e1lisis es muy bueno, pero a menudo acabar\u00e1 con la misma respuesta: Deber\u00eda publicar los cambios durante la noche. Y aunque esto podr\u00eda parecer una gran idea si s\u00f3lo nos fij\u00e1ramos en esta cuesti\u00f3n, es importante que tambi\u00e9n tengamos en cuenta la siguiente. \u00bfHay alguien despierto y preparado para solucionar posibles problemas en ese momento? Si la respuesta es no, entonces desplegar los cambios en mitad de la noche podr\u00eda no ser la mejor idea. En su lugar, deber\u00edas identificar las franjas horarias en las que puedas encontrar el mejor equilibrio entre el n\u00famero de usuarios activos y los desarrolladores dispuestos a solucionar los problemas. Esto variar\u00e1 mucho dependiendo de tu proyecto y de tu equipo, pero en general, deber\u00edas ser capaz de encontrar algunas opciones. Y si ya tienes un horario fijo de despliegue, incluso puedes convencer a tu equipo de que est\u00e9 listo a horas extra\u00f1as del d\u00eda. Es mucho m\u00e1s f\u00e1cil convencer a alguien de que venga unas horas antes si sabe que s\u00f3lo ocurre una vez cada ciclo o sprint. Info Aunque no hay un momento perfecto para el despliegue, definitivamente hay momentos que son mejores que otros. \u00bfCu\u00e1les son las ventajas del despliegue y de los entornos m\u00faltiples? Reducci\u00f3n del riesgo de romper un sitio web en producci\u00f3n Una de las principales razones para utilizar m\u00faltiples entornos y confiar en el despliegue es reducir el riesgo de que los cambios tengan un impacto negativo en un sitio web en vivo. Mientras que los cambios menores se pueden hacer f\u00e1cilmente directamente en un sitio web en vivo, los cambios m\u00e1s grandes se pueden hacer en entornos separados sin el riesgo de romper nada en el entorno en vivo. Tener varios usuarios trabajando en el mismo sitio web tambi\u00e9n garantiza que nadie se arriesgue a romper algo debido a los cambios de otro usuario. Ahorro de tiempo Sin la preocupaci\u00f3n de romper algo en un sitio web en vivo, puede realizar los cambios en el orden que prefiera. Esto significa que puedes optimizar tu flujo de trabajo para realizar los cambios sin tener en cuenta el aspecto o el funcionamiento del sitio web mientras lo haces. Si trabajas en un entorno local tambi\u00e9n tienes la ventaja de que los cambios se procesan m\u00e1s r\u00e1pido y no dependes de ning\u00fan problema de conectividad. A la hora de desplegar los cambios, tambi\u00e9n ahorrar\u00e1s tiempo, ya que podr\u00e1s realizar todos los cambios al mismo tiempo en lugar de tener que hacerlo en varios pasos m\u00e1s peque\u00f1os. El contenido sensible al tiempo es m\u00e1s f\u00e1cil de gestionar Si est\u00e1 llevando a cabo campa\u00f1as que son sensibles al tiempo y que s\u00f3lo pueden ponerse en marcha a partir de un determinado d\u00eda u hora, entonces la ejecuci\u00f3n de m\u00faltiples entornos y el uso del despliegue pueden ahorrarle una gran cantidad de estr\u00e9s. Al crear todo el contenido en un entorno de puesta en escena (o similar) puedes terminar tu campa\u00f1a sin preocuparte de que sea visible para tus usuarios. Y cuando llegue el momento de lanzarla, podr\u00e1 hacerla visible en muy poco tiempo despleg\u00e1ndola en su entorno real. Y si la herramienta de despliegue incluye roles de usuario con configuraci\u00f3n de permisos, es posible que un editor de contenidos haga todo esto -incluyendo el despliegue de los cambios- sin involucrar a un desarrollador en el proceso. Referencias What is an application server? (I) What is an application server? (II) What is deployment in software and web development","title":"Tema 3 - Servidores de aplicaciones"},{"location":"T3/ServAplic/#tema-3-servidores-de-aplicaciones","text":"","title":"Tema 3: Servidores de aplicaciones"},{"location":"T3/ServAplic/#introduccion","text":"Un servidor de aplicaciones es un marco mixto de software que permite tanto la creaci\u00f3n de aplicaciones web como un entorno de servidor para ejecutarlas. A menudo puede ser una pila compleja de diferentes elementos computacionales que ejecutan tareas espec\u00edficas que necesitan trabajar como uno solo para alimentar m\u00faltiples nubes y software y aplicaciones basadas en la web. Situado entre el servidor web y el nivel de back-end del servidor de bases de datos, el servidor de aplicaciones es esencialmente un intermediario para el servidor de bases de datos y los usuarios de las aplicaciones empresariales o de consumo que soporta mediante el uso de varios protocolos e interfaces de programaci\u00f3n de aplicaciones (API). Dependiendo de lo que se instale, un servidor de aplicaciones puede clasificarse de varias maneras, como servidor web, servidor de aplicaciones de base de datos, servidor de aplicaciones de prop\u00f3sito general o servidor de aplicaciones empresariales. Es habitual que se utilice junto con un servidor web o que contenga un servidor web, por lo que ambos pueden converger y denominarse servidor de aplicaciones web. Tambi\u00e9n es lo suficientemente vers\u00e1til como para ser utilizado con otros servidores de aplicaciones simult\u00e1neamente. Los servidores de aplicaciones tambi\u00e9n pueden contener sus propias interfaces gr\u00e1ficas de usuario para su gesti\u00f3n a trav\u00e9s de PC, pero tambi\u00e9n pueden ocuparse de sus propios recursos, as\u00ed como del procesamiento de transacciones, la mensajer\u00eda, la agrupaci\u00f3n de recursos y conexiones, y la realizaci\u00f3n de tareas de seguridad.","title":"Introducci\u00f3n"},{"location":"T3/ServAplic/#que-pasa-con-java","text":"Para los requisitos de gama alta, los servidores de aplicaciones suelen contar con supervisi\u00f3n de alta disponibilidad, agrupaci\u00f3n en cl\u00fasteres, equilibrio de carga, redundancia integrada y servicios de aplicaciones distribuidas de alto rendimiento, as\u00ed como soporte para el acceso a bases de datos complicadas. Entre las plataformas de servidores de aplicaciones m\u00e1s populares est\u00e1n J2EE, WebLogic, Glassfish, JBoss Enterprise Application Platform, Apache Tomcat y Apache Geronimo, por nombrar s\u00f3lo algunas.","title":"\u00bfQu\u00e9 pasa con Java?"},{"location":"T3/ServAplic/#por-que-utilizar-un-servidor-de-aplicaciones-cuales-son-las-ventajas","text":"Los servidores de aplicaciones se utilizan mejor cuando es necesario integrarse con bases de datos y servidores, por ejemplo, servidores web, que ya han sido creados y forman parte de la infraestructura inform\u00e1tica existente de una organizaci\u00f3n. Una de las razones principales es que un servidor de aplicaciones puede servir como medio para proporcionar integridad al c\u00f3digo y a los datos, al tener un enfoque integrado y centralizado para mantener las aplicaciones actualizadas. No tener uno puede llevar a diferentes versiones de la misma aplicaci\u00f3n en toda la empresa, lo que a su vez podr\u00eda traer consigo problemas de compatibilidad de software. Otra raz\u00f3n fundamental para utilizar un servidor de aplicaciones es que proporciona a la empresa una capa adicional de seguridad. Al situarse entre las p\u00e1ginas web y las bases de datos, un servidor de aplicaciones ayuda a actuar como una barrera adicional contra los ciberataques de inyecci\u00f3n SQL, ya que no hay un v\u00ednculo directo entre una p\u00e1gina web y una base de datos. Esta separaci\u00f3n conlleva la necesidad de validaci\u00f3n y/o la exigencia de mostrar la l\u00f3gica de negocio, garantizando as\u00ed que el texto introducido en un formulario en un sitio web no sea explotado como una llamada SQL maliciosa. La seguridad se ve reforzada por el establecimiento de procesos de autenticaci\u00f3n centralizados y la gesti\u00f3n del acceso a los datos. El rendimiento de las aplicaciones de uso intensivo y de gran tama\u00f1o tambi\u00e9n puede ser impulsado por un servidor de aplicaciones, ya que se puede establecer un mayor control sobre el tr\u00e1fico de la red. Y la capacidad de trabajar a escala es otro factor importante a la hora de considerar el uso de un servidor de aplicaciones, ya que su capacidad de agrupar conexiones a bases de datos significa que puede ampliarse para actuar como una granja de servidores web sin necesidad de a\u00f1adir conexiones adicionales a las bases de datos subyacentes.","title":"\u00bfPor qu\u00e9 utilizar un servidor de aplicaciones? \u00bfCu\u00e1les son las ventajas?"},{"location":"T3/ServAplic/#en-que-se-diferencia-de-otros-tipos-de-servidores","text":"Aunque un servidor de aplicaciones y un servidor web puedan parecer similares a primera vista, en realidad son bastante diferentes. El primero se diferencia del segundo en que se ocupa de servir la l\u00f3gica de negocio a las aplicaciones a trav\u00e9s de un conjunto de protocolos. Un servidor web, en cambio, trabaja con peticiones HTTP, respondiendo y gestion\u00e1ndolas para llevar a cabo las funciones del sitio web, adem\u00e1s de alojar dicho sitio web, almacenando su contenido est\u00e1tico, como im\u00e1genes, JavaScript, CSS y p\u00e1ginas HTML. En circunstancias comunes, un servidor web puede no soportar transacciones o agrupaci\u00f3n de conexiones a bases de datos, pero puede tener caracter\u00edsticas de tolerancia a fallos y escalabilidad, incluyendo cach\u00e9, clustering y balanceo de carga. A su vez, un servidor web es diferente de un servidor de base de datos, ya que este \u00faltimo realiza tareas como el almacenamiento de datos, la manipulaci\u00f3n y el an\u00e1lisis de datos, y el archivo, entre otras tareas relacionadas con la gesti\u00f3n de datos. Estos servidores de bases de datos utilizan un sinf\u00edn de protocolos, como ODBC o JDBC, por nombrar algunos. Los servidores de bases de datos, como es l\u00f3gico, alojan bases de datos como Oracle, SQL Server, MySQL, etc. Cabe destacar que las funciones de estos servidores a menudo pueden agruparse para ofrecer una pila de servidores, con el fin de proporcionar efectivamente los subsistemas para apoyar, por ejemplo, un conjunto de software o componentes necesarios para crear una plataforma de servicios.","title":"\u00bfEn qu\u00e9 se diferencia de otros tipos de servidores?"},{"location":"T3/ServAplic/#servidor-de-aplicaciones-ii","text":"as aplicaciones vienen en todas las formas, tama\u00f1os y casos de uso. En un mundo en el que dependemos de una serie de procesos empresariales cr\u00edticos, los servidores de aplicaciones son los ordenadores de gran potencia que proporcionan recursos de aplicaciones a los usuarios y clientes web. Los servidores de aplicaciones se sit\u00faan f\u00edsica o virtualmente entre los servidores de bases de datos que almacenan los datos de las aplicaciones y los servidores web que se comunican con los clientes. Los servidores de aplicaciones y el middleware af\u00edn son los sistemas operativos que soportan el desarrollo y la entrega de una aplicaci\u00f3n. Ya sea una aplicaci\u00f3n de escritorio, m\u00f3vil o web, los servidores de aplicaciones desempe\u00f1an un papel fundamental en la conexi\u00f3n de un mundo de dispositivos. Examinamos c\u00f3mo los servidores de aplicaciones encajan en la arquitectura de servicios de una red, c\u00f3mo los servidores de aplicaciones soportan los servidores web, las aplicaciones nativas y las aplicaciones m\u00f3viles, y el estado actual de los servidores de aplicaciones en la d\u00e9cada de 2020.","title":"Servidor de aplicaciones II"},{"location":"T3/ServAplic/#terminologia-de-los-servidores-de-aplicaciones","text":"T\u00e9rmino Descripci\u00f3n Servidor web Responsable de almacenar, procesar y entregar los datos de E/S de las p\u00e1ginas web Cliente web Punto final que intenta acceder a los recursos de la web o de la aplicaci\u00f3n HTTPS Protocolo de comunicaci\u00f3n entre el servidor web y los clientes web Servlet/JSON Lenguaje para el intercambio entre los servidores web y de aplicaciones L\u00f3gica de negocio Reglas para el almacenamiento de datos y la transferencia de recursos de la aplicaci\u00f3n Aplicaci\u00f3n Un programa de software o un sitio web unido a una base de datos","title":"Terminolog\u00eda de los servidores de aplicaciones"},{"location":"T3/ServAplic/#el-papel-del-servidor-de-aplicaciones-en-la-arquitectura-de-servicios","text":"Cuando los usuarios de las aplicaciones, ya sea el personal o los clientes web, solicitan acceso a una aplicaci\u00f3n, el servidor de aplicaciones suele hacer el trabajo pesado en el backend para almacenar y procesar las solicitudes din\u00e1micas de las aplicaciones.","title":"El papel del servidor de aplicaciones en la arquitectura de servicios"},{"location":"T3/ServAplic/#por-que-necesitamos-servidores-de-aplicaciones","text":"Miles de millones de clientes web hacen peticiones HTTP cada d\u00eda, esperando un acceso instant\u00e1neo a usted-nombre-la-aplicaci\u00f3n. Headspace durante la rutina de la ma\u00f1ana, Google Docs para el informe extenso, Twitter durante la pausa para el caf\u00e9, no importa la aplicaci\u00f3n en uso, est\u00e1 siendo extra\u00edda de un servidor de aplicaciones y entregada a trav\u00e9s de un servidor web. Los servidores web se encargan de servir a los clientes web peticiones HTTP con respuestas HTTP. A diferencia de los servidores de aplicaciones, el dise\u00f1o del servidor web es lo suficientemente ligero como para procesar las solicitudes de datos est\u00e1ticos de varias aplicaciones (o sitios web), manteniendo la seguridad. Las peticiones din\u00e1micas, a menudo en forma de aplicaciones, requieren asistencia adicional.","title":"\u00bfPor qu\u00e9 necesitamos servidores de aplicaciones?"},{"location":"T3/ServAplic/#los-servidores-de-aplicaciones-optimizan-el-trafico-y-anaden-seguridad","text":"Para conseguir una agilidad \u00f3ptima del servidor web, no sirve gestionar tanto las peticiones HTTP de los clientes web como pasar o almacenar recursos de m\u00faltiples sitios web. Los servidores de aplicaciones llenan este vac\u00edo con un dise\u00f1o de alta potencia construido para manejar las solicitudes de contenido web din\u00e1mico. Los servidores de aplicaciones tambi\u00e9n proporcionan redundancia de programas y una capa adicional de seguridad. Una vez desplegado entre una base de datos y un servidor web, el trabajo de preservar y duplicar la arquitectura de la aplicaci\u00f3n a trav\u00e9s de la red es m\u00e1s factible. El paso adicional entre las potenciales comunicaciones web maliciosas y las joyas de la corona en el servidor de base de datos a\u00f1ade una capa de seguridad adicional. Dado que los servidores de aplicaciones pueden procesar solicitudes de l\u00f3gica empresarial, un intento de inyecci\u00f3n SQL es tambi\u00e9n mucho m\u00e1s dif\u00edcil. Las organizaciones pueden proteger a\u00fan m\u00e1s sus datos con un servidor proxy inverso colocado delante de sus bases de datos. Los servidores proxy y las VPN pueden hacer maravillas para anonimizar y encriptar la comunicaci\u00f3n para proteger a los usuarios y los datos de la empresa.","title":"Los servidores de aplicaciones optimizan el tr\u00e1fico y a\u00f1aden seguridad"},{"location":"T3/ServAplic/#como-funcionan-los-servidores-de-aplicaciones","text":"\u00bfQu\u00e9 son los servlets? Un servlet es un programa Java que se ejecuta en un servidor Web y construye o sirve p\u00e1ginas web. De esta forma se pueden construir p\u00e1ginas din\u00e1micas, basadas en diferentes fuentes variables: datos proporcionados por el usuario, fuentes de informaci\u00f3n variable (p\u00e1ginas de noticias, por ejemplo), o programas que extraigan informaci\u00f3n de bases de datos. Comparado con un CGI, un servlet es m\u00e1s sencillo de utilizar, m\u00e1s eficiente (se arranca un hilo por cada petici\u00f3n y no un proceso entero), m\u00e1s potente y portable. Con los servlets podremos, entre otras cosas, procesar, sincronizar y coordinar m\u00faltiples peticiones de clientes, reenviar peticiones a otros servlets o a otros servidores u otros. Como la mayor\u00eda de los servidores de hoy en d\u00eda, los servidores de aplicaciones contienen caracter\u00edsticas de seguridad, transacciones, servicios, clustering, diagn\u00f3sticos y bases de datos. En lo que se diferencian los servidores de aplicaciones es en su capacidad para procesar peticiones de servlets (programas Java) desde un servidor web. En la imagen anterior, se muestra el flujo general de los servidores de aplicaciones web: El cliente abre un navegador y solicita acceso a un sitio web El servidor web recibe la petici\u00f3n HTTP y responde con la p\u00e1gina web deseada El servidor web gestiona las peticiones de datos est\u00e1ticos, pero el cliente quiere utilizar una herramienta interactiva Al tratarse de una petici\u00f3n de datos din\u00e1micos, el servidor web transfiere la petici\u00f3n a un servidor de aplicaciones El servidor de aplicaciones recibe la petici\u00f3n HTTP y la convierte en una petici\u00f3n de servlet El servlet llega al servidor de la base de datos, y el servidor de aplicaciones recibe una respuesta del servlet El servidor de aplicaciones traduce la respuesta del servlet al formato HTTP para el acceso del cliente Al recibir una solicitud de servlet de un servidor web, el servidor de aplicaciones procesa la solicitud y responde al servidor web mediante la respuesta de servlet. Dado que los servidores de aplicaciones trabajan principalmente con peticiones de l\u00f3gica de negocio, el servidor web traduce la respuesta del servlet y pasa una respuesta HTTP accesible para el usuario. Servidor de aplicaciones Servidor web Dise\u00f1ado para Sirve peticiones HTTP y de otra l\u00f3gica de negocio Sirve peticiones HTTP Almacena y proporciona L\u00f3gica de negocio Contention web est\u00e1tico La utilizaci\u00f3n de los recursos es Pesada Ligera Soporta Transacciones distribuidas y Enterprise JavaBeans (EJB) Servlets, Java Server Pages (JSP y JSON","title":"\u00bfC\u00f3mo funcionan los servidores de aplicaciones?"},{"location":"T3/ServAplic/#servidores-de-aplicaciones-en-la-decada-de-2020","text":"El mercado de los servidores de aplicaciones espera crecer a una CAGR del 13,2%, pasando de cerca de 17.000 millones de d\u00f3lares en 2020 a 41.000 millones en 2026. El crecimiento continuo no es una sorpresa, ya que la conectividad a Internet y la dependencia de las aplicaciones crecen. La migraci\u00f3n a las plataformas y servicios en la nube y el auge de los dispositivos IoT son dos impulsores clave en el mercado de infraestructura de aplicaciones y middleware moderno. A esto hay que a\u00f1adir un movimiento hacia las pol\u00edticas BYOD y una fuerza de trabajo remota que depende de una mayor conectividad y eficiencia operativa. No hay que confundir el valor asignado a estos potentes m\u00f3dulos y su papel en el servicio a los clientes con recursos de aplicaciones.","title":"Servidores de aplicaciones en la d\u00e9cada de 2020"},{"location":"T3/ServAplic/#servidores-de-aplicaciones-el-mejor-amigo-de-un-servidor-web","text":"Los servidores de aplicaciones son fundamentales para las exigencias actuales de interconexi\u00f3n. Las empresas, en \u00faltima instancia, est\u00e1n en deuda con los intereses de los clientes, y sin una conexi\u00f3n escalable y estable a los recursos de las aplicaciones, los clientes modernos huyen hacia las colinas. Los servidores de aplicaciones asumen el papel de conector y mejor amigo de los servidores web. Cuando los servidores web tienen una petici\u00f3n del cliente que es demasiado para soportar, los servidores de aplicaciones hacen posible mantener la comunicaci\u00f3n sin problemas con el contenido web din\u00e1mico.","title":"Servidores de aplicaciones: El mejor amigo de un servidor web"},{"location":"T3/ServAplic/#que-es-el-despliegue-de-aplicaciones-web","text":"El despliegue en el desarrollo de software y web significa empujar los cambios o actualizaciones de un entorno de despliegue a otro. Al configurar un sitio web, siempre tendr\u00e1s tu sitio web en vivo, que se llama el entorno en vivo o entorno de producci\u00f3n. Si quieres tener la capacidad de hacer cambios sin afectar a tu sitio web en vivo, entonces puedes a\u00f1adir entornos adicionales. Estos entornos se llaman entornos de desarrollo o entornos de despliegue. Los entornos de desarrollo adicionales suelen ser un entorno local, un entorno de desarrollo y un entorno de preparaci\u00f3n (tambi\u00e9n conocido como sitio de preparaci\u00f3n). El n\u00famero de entornos que necesitas depende de ti y de la complejidad del proyecto en el que est\u00e1s trabajando. Aunque los modelos de despliegue pueden variar, el m\u00e1s com\u00fan es el cl\u00e1sico modelo de despliegue \"de izquierda a derecha\" cuando se trabaja con m\u00faltiples entornos de despliegue. En este modelo, los cambios se realizan en entornos locales, de desarrollo o de preparaci\u00f3n (dependiendo de la configuraci\u00f3n) y se empujan de izquierda a derecha a trav\u00e9s de los diferentes entornos, terminando en el entorno en vivo. Una vez completado este proceso de despliegue, los nuevos cambios ser\u00e1n visibles en el entorno activo. En la imagen anterior se muestra una forma muy simplificada y cl\u00e1sica de manejar los despliegues cuando se trabaja con sitios web en un CMS. No necesariamente se necesitan todos los entornos anteriores, pero el proceso sigue siendo el mismo. Al utilizar m\u00faltiples entornos se obtiene una lista de ventajas - la principal es que se pueden hacer cambios sin que afecten a su sitio web en vivo. Una vez que los cambios se hacen, se prueban y est\u00e1n listos para ser empujado en vivo, el proceso de despliegue se encarga del resto.","title":"\u00bfQu\u00e9 es el despliegue de aplicaciones web?"},{"location":"T3/ServAplic/#de-que-pasos-consta-el-proceso-despliegue","text":"El flujo del proceso de despliegue consta de 5 pasos: Planificaci\u00f3n, desarrollo, pruebas, despliegue y supervisi\u00f3n. A continuaci\u00f3n nos adentraremos en cada uno de los 5 pasos, pero antes nos gustar\u00eda a\u00f1adir una nota r\u00e1pida. El flujo del proceso de despliegue que aparece a continuaci\u00f3n cubre los aspectos fundamentales, que se dividen en 5 pasos. Esto no significa que sea la \u00fanica manera de hacerlo - podr\u00eda haber un proceso mejor para usted. Hemos intentado mantenerlo lo m\u00e1s sencillo posible para que cubra las partes m\u00e1s importantes. Si tu situaci\u00f3n requiere pasos adicionales en el proceso, entonces deber\u00edas hacerlo. Recuerde tener un plan de despliegue de software Para asegurarse de que el proceso de despliegue se desarrolle con la mayor fluidez posible, lo mejor es tener un plan de despliegue que se siga en todo momento. Al tener un plan te aseguras de que todo se haga de la misma manera cada vez que se realicen cambios. Esto es especialmente \u00fatil cuando varios usuarios trabajan en el mismo proyecto. Un plan de despliegue debe incluir reglas sobre cu\u00e1ndo desplegar desde los entornos locales a los sitios de desarrollo o de puesta en escena, as\u00ed como horarios para cuando los nuevos cambios pueden ir a un entorno en vivo. Al tener un plan establecido, se reduce el riesgo de conflictos entre los diferentes cambios y se asegura que el proceso de despliegue sea lo m\u00e1s f\u00e1cil y fluido posible. Si est\u00e1s trabajando en un proyecto de c\u00f3digo abierto, tambi\u00e9n te da la oportunidad de hacer Release Candidates y dejar que tu comunidad lo pruebe para detectar cualquier error que puedas haber pasado por alto. Adem\u00e1s de un plan general, tambi\u00e9n es importante planificar cada uno de los cambios que vayas a realizar. Este proceso ser\u00e1 muy r\u00e1pido para los cambios menores, pero deber\u00eda ser mucho m\u00e1s extenso para los grandes cambios. Si planificas con mucha antelaci\u00f3n, estar\u00e1s mucho m\u00e1s preparado para tener un proceso de despliegue sin problemas. El desarrollo propiamente dicho Una vez que tengas el plan en marcha, es el momento de hacer el desarrollo real. Para garantizar que cualquier desarrollo pueda realizarse simult\u00e1neamente y sin romper nada, es importante trabajar \u00fanicamente en entornos locales o de desarrollo. Una vez que el proceso de desarrollo est\u00e1 hecho, es el momento de empezar a probar y desplegar los cambios a trav\u00e9s de la configuraci\u00f3n de su entorno. \u00bfNo est\u00e1s seguro de si trabajar en local o en un entorno de desarrollo? Entonces echa un vistazo a la secci\u00f3n de mejores pr\u00e1cticas de despliegue. Probar los cambios Probar los cambios es crucial para garantizar que no haya errores en el entorno de producci\u00f3n final. Pero las pruebas no pueden completarse sin desplegar los cambios en nuevos entornos. Una vez que hayas comprobado que todos los cambios funcionan en tu entorno local o de desarrollo, es el momento de desplegar los cambios en el siguiente entorno. Esto debe hacerse hasta el entorno de preparaci\u00f3n, donde se deben realizar las pruebas finales de control de calidad. Si todo est\u00e1 correctamente probado y funciona en un entorno parecido al entorno real, es el momento de desplegarlo en vivo. Si se descubren errores por el camino en cualquier entorno, es importante tener un plan para manejarlos. Por lo general, cualquier cambio que no pase las pruebas en el entorno de ensayo debe ser enviado de nuevo a la fase de desarrollo y -una vez corregido- volver a trabajar en los entornos. Desplegar los cambios en el entorno real Una vez que se han realizado todas las pruebas en los entornos anteriores y se han corregido los errores, es el momento de desplegar los cambios en el entorno real. Esto deber\u00eda ser algo bastante seguro, pero todos los que han trabajado en el desarrollo de software saben que algo puede salir mal. As\u00ed que, aunque es f\u00e1cil detenerse aqu\u00ed, es importante incluir el \u00faltimo paso del proceso: la monitorizaci\u00f3n. Supervisar los cambios Una vez que los nuevos cambios est\u00e9n en marcha y los usuarios reales utilicen activamente el sitio web o la aplicaci\u00f3n, es importante supervisar que todo funcione seg\u00fan lo previsto. Independientemente de la planificaci\u00f3n realizada, existe la posibilidad de que los usuarios se encuentren con problemas o realicen acciones que usted no hab\u00eda previsto durante la planificaci\u00f3n y el desarrollo. Un buen consejo para la monitorizaci\u00f3n es planificar los lanzamientos para los momentos en los que la menor cantidad de usuarios lo noten y en los que tengas recursos de desarrollo listos en caso de que haya que arreglar algo. De este modo, el n\u00famero de usuarios afectados por cualquier error ser\u00e1 m\u00ednimo y tendr\u00e1s gente preparada para arreglarlo o revertir los cambios si es necesario. Si tienes que revertir los cambios, es importante mantener la calma y tener un proceso para manejarlo con la misma minuciosidad con la que manejas los despliegues.","title":"\u00bfDe qu\u00e9 pasos consta el proceso despliegue?"},{"location":"T3/ServAplic/#diferentes-tipos-de-despliegue","text":"Cuando se trata del tipo de despliegue, a menudo se divide en dos partes. Por lo general, se dividir\u00e1 entre metadatos y contenido, ya que estos tienen diferentes impactos en un nuevo entorno y deben ser manejados de manera diferente.","title":"Diferentes tipos de despliegue"},{"location":"T3/ServAplic/#despliegue-de-metadatos","text":"Los metadatos incluyen los cambios en el c\u00f3digo, las plantillas, las hojas de estilo, los archivos, etc. Estos cambios a menudo requerir\u00e1n una comprobaci\u00f3n de validaci\u00f3n entre entornos para ver si tienen alg\u00fan conflicto imprevisto que deba resolverse. Muchas herramientas de despliegue incluyen comprobaciones de coherencia y ayudan a guiarte en caso de conflictos.","title":"Despliegue de metadatos"},{"location":"T3/ServAplic/#despliegue-de-contenidos","text":"El contenido, como el texto, las im\u00e1genes y los v\u00eddeos, se maneja de forma diferente durante el despliegue, ya que es menos complicado moverlo entre entornos que los metadatos. Por esa raz\u00f3n, a menudo ver\u00e1s que las herramientas de despliegue hacen que el despliegue de contenido sea accesible para los editores de contenido y no s\u00f3lo para los desarrolladores. De esta manera, un editor de contenidos no depende de un desarrollador cuando se trata de enviar nuevos contenidos a un entorno activo.","title":"Despliegue de contenidos"},{"location":"T3/ServAplic/#mejores-practicas-de-despliegue","text":"Cuando se trabaja con entornos de despliegue, es importante, como se ha mencionado anteriormente, tener un plan y un proceso claro para ello en su equipo. Para ampliar ese proceso hemos reunido algunas mejores pr\u00e1cticas que son buenas para implementar como parte de su proceso. Ten en cuenta que las siguientes pr\u00e1cticas recomendadas se refieren principalmente al desarrollo de software y de la web. Si est\u00e1s haciendo otros tipos de desarrollo puede haber otras cosas a considerar en tu flujo de trabajo de despliegue.","title":"Mejores pr\u00e1cticas de despliegue"},{"location":"T3/ServAplic/#utiliza-git","text":"Esto puede parecer obvio, pero tener un sistema de control de versiones es inestimable para cualquier flujo de trabajo de despliegue. Sin \u00e9l, es probable que se produzcan errores si se trabaja en equipo. Incluso si eres el \u00fanico desarrollador que trabaja en un proyecto, es muy recomendable utilizar Git en caso de que necesites volver a versiones anteriores o si alguien nuevo se une a tu equipo. Sin Git ser\u00e1 dif\u00edcil asegurar la consistencia en tu flujo de trabajo de despliegue y puede llevar a que se cometan m\u00e1s errores por desplegar c\u00f3digo inacabado o por no tener a todos los miembros del equipo trabajando en la misma versi\u00f3n del c\u00f3digo.","title":"Utiliza Git"},{"location":"T3/ServAplic/#trabajar-en-ramas","text":"Como regla general, tu equipo deber\u00eda trabajar en ramas. Hacerlo as\u00ed permitir\u00e1 trabajar en varias cosas al mismo tiempo sin que se afecten entre s\u00ed. Un ejemplo es cuando se encuentra un error que debe ser corregido. Si un desarrollador est\u00e1 utilizando una rama para trabajar en una nueva caracter\u00edstica, puede hacer r\u00e1pidamente una nueva rama del entorno de desarrollo para trabajar en el error. De este modo, habr\u00e1 dos ramas diferentes que no chocar\u00e1n ni crear\u00e1n posibles conflictos de fusi\u00f3n m\u00e1s adelante. Trabajar con ramas tambi\u00e9n ayuda a tu equipo de preguntas y respuestas a la hora de desplegar en un entorno de preparaci\u00f3n. Tener los cambios en ramas separadas y fusionarlas dar\u00e1 a los probadores una mejor visi\u00f3n de lo que se empuj\u00f3 y lo que deben probar. Utiliza un entorno local como entorno de desarrollo Aunque es posible trabajar directamente en un entorno de desarrollo, en la mayor\u00eda de los casos se ahorrar\u00e1 mucho tiempo trabajando localmente. Al instalar el sitio web o el software de forma local, podr\u00e1s trabajar de forma m\u00e1s eficiente y acelerar las pruebas y la verificaci\u00f3n de tu c\u00f3digo. El \u00fanico inconveniente de trabajar en local es que tienes que instalar el sitio web o el software en tu m\u00e1quina. Pero el tiempo invertido en ello se recupera varias veces a largo plazo. En primer lugar, no tienes que confirmar, empujar y desplegar constantemente un cambio antes de poder verificar si funciona. Y cuando algo no funciona (esto nos pasa a todos) tendr\u00e1s que revertirlo, empujarlo de nuevo y volver a desplegarlo. En lugar de eso, puedes simplemente ejecutarlo todo localmente y, una vez que funcione como es debido, puedes empujarlo directamente al entorno de preparaci\u00f3n para una prueba m\u00e1s rigurosa.","title":"Trabajar en ramas"},{"location":"T3/ServAplic/#revise-las-diferencias-antes-de-desplegarlo-en-el-entorno-real","text":"Una vez que el equipo de pruebas se haya asegurado de que todo funciona en el entorno de pruebas, es el momento de desplegar el c\u00f3digo en el entorno real. Pero antes de hacer el despliegue final, es importante hacer una revisi\u00f3n final de las diferencias entre su entorno actual en vivo y el entorno de desarrollo que est\u00e1 empujando. Este paso puede parecer excesivo y a menudo puede parecer redundante, ya que no se han encontrado errores. Entonces, \u00bfpor qu\u00e9 seguimos recomendando este paso? Porque en esas pocas ocasiones en las que realmente se detect\u00f3 un error. Incluso despu\u00e9s de las pruebas exhaustivas y la garant\u00eda de calidad, las cosas pueden ir mal tan pronto como se llega al entorno real. Y una vez que eso sucede, a menudo puede ser muy estresante implementar correcciones r\u00e1pidas o hacer una reversi\u00f3n completa de la versi\u00f3n. Por lo general, querr\u00e1s evitar esto a toda costa, por lo que te recomendamos encarecidamente que hagas una revisi\u00f3n final de tu c\u00f3digo antes de pulsar el bot\u00f3n de despliegue. Tener un calendario de despliegue Como parte de tu plan de despliegue, te recomendamos encarecidamente que incluyas tambi\u00e9n un calendario de despliegue. Tener un tiempo fijo para cuando los nuevos cambios pueden ser desplegados a su entorno en vivo es una gran manera de asegurarse de que todo el mundo sabe cuando los nuevos cambios est\u00e1n llegando. Puede ser tentador tomar un proceso m\u00e1s iterativo en el que los nuevos cambios son empujados tan pronto como est\u00e1n listos. Y aunque esto puede funcionar definitivamente para algunos cambios y algunos equipos, tambi\u00e9n hay situaciones en las que esto puede tener consecuencias desafortunadas. Esto es especialmente cierto en el caso de los lanzamientos importantes, en los que es importante tener ojos y manos humanos reales listos si algo no funciona como se pretende. Y al programar los despliegues, su equipo puede planificar las tareas y las horas de trabajo en torno a estas ventanas de tiempo en las que podr\u00edan tener que ayudar con una correcci\u00f3n en caliente o una reversi\u00f3n. La frecuencia de las ventanas de despliegue y la hora del d\u00eda en que deben planificarse es algo que trataremos m\u00e1s adelante. Una \u00faltima nota: aunque tengas un calendario de despliegue, siempre es una buena idea hacer despliegues manuales en lugar de autom\u00e1ticos. Adem\u00e1s de tener a alguien que haga la \u00faltima revisi\u00f3n, tambi\u00e9n ayuda que alguien de tu equipo sepa exactamente cu\u00e1ndo y qu\u00e9 se despleg\u00f3.","title":"Revise las diferencias antes de desplegarlo en el entorno real"},{"location":"T3/ServAplic/#considera-tener-grupos-de-usuarios-con-diferentes-permisos","text":"Mientras que cualquier desarrollador debe ser capaz de empujar los cambios a los entornos de ensayo, puede ser una buena idea para restringir qui\u00e9n puede desplegar en vivo. Para los equipos m\u00e1s peque\u00f1os, esto puede no tener mucho sentido, ya que puede crear un cuello de botella para obtener nuevos cambios. Pero si se trata de un equipo m\u00e1s grande con un nivel de experiencia variado entre los miembros del equipo, puede ser una gran idea dejar que s\u00f3lo los desarrolladores senior desplieguen en el entorno en vivo. Esto asegura efectivamente un mayor nivel de control sobre el flujo de liberaci\u00f3n y tambi\u00e9n significa que al menos un par de ojos senior han visto lo que est\u00e1 pasando en el entorno real. Si tienes un enfoque muy iterativo con lanzamientos r\u00e1pidos, esto podr\u00eda ralentizarte. Aun as\u00ed, dado que los cambios que se empujan son normalmente m\u00e1s peque\u00f1os con este enfoque, probablemente no te ralentizar\u00e1 mucho. Y si significa detectar algunos errores m\u00e1s, el tiempo que se ahorra al no tener que corregir errores compensar\u00e1 el tiempo invertido. Hablando de romper cosas...","title":"Considera tener grupos de usuarios con diferentes permisos"},{"location":"T3/ServAplic/#mantenga-la-calma-incluso-si-algo-se-rompe","text":"Acabas de desplegar en tu entorno de producci\u00f3n y ahora tu sitio web est\u00e1 roto. \u00bfLe resulta familiar? Desgraciadamente, estas cosas ocurren - no importa lo cuidadoso que seas. Pero en lugar de entrar en p\u00e1nico y aplicar hotfixes o retroceder inmediatamente, es importante mantener la calma y asegurarse de que lo que est\u00e1 haciendo no va a romper las cosas a\u00fan m\u00e1s. En primer lugar, deber\u00edas comprobar si es posible realizar una reversi\u00f3n y si realmente se arreglar\u00eda algo. En algunas situaciones, es posible que hayas hecho cambios que son irreversibles y que una reversi\u00f3n s\u00f3lo te causar\u00eda problemas a\u00fan mayores. Tambi\u00e9n hay que comprobar si lo que se ha roto es una caracter\u00edstica existente o nueva. De nuevo, si la cosa que se rompi\u00f3 no era parte de la nueva versi\u00f3n, probablemente no servir\u00e1 de nada hacer un rollback. As\u00ed que en lugar de entrar en p\u00e1nico, ten un plan preparado y respira hondo antes de ponerte a trabajar en la b\u00fasqueda de una soluci\u00f3n. Puede parecer sencillo, pero puede ayudarte a salir de una mala situaci\u00f3n mucho m\u00e1s r\u00e1pido que si te lanzas directamente.","title":"Mantenga la calma - incluso si algo se rompe"},{"location":"T3/ServAplic/#a-que-hora-del-dia-debes-desplegar-los-cambios","text":"En caso de que algo se rompa al desplegar en el entorno de producci\u00f3n, es importante encontrar el mejor momento para hacerlo. Y aunque este momento var\u00eda mucho de un proyecto a otro, hay dos preguntas que puedes hacerte para determinar cu\u00e1ndo desplegar los cambios: \u00bfCu\u00e1ndo tiene la menor cantidad de usuarios activos? \u00bfCu\u00e1ndo tiene a alguien preparado para supervisar y solucionar los problemas despu\u00e9s del despliegue?","title":"\u00bfA qu\u00e9 hora del d\u00eda debes desplegar los cambios?"},{"location":"T3/ServAplic/#cuando-tiene-el-menor-numero-de-usuarios-activos","text":"Por lo general, lo que quiere es que el menor n\u00famero posible de personas se vea afectado por sus nuevos cambios. Por lo tanto, como regla general, debe buscar cualquier momento del d\u00eda en el que el menor n\u00famero de usuarios est\u00e9 utilizando activamente su sitio web o software. En el caso de los sitios web, esto puede hacerse consultando las herramientas de an\u00e1lisis de datos que hayas elegido, por ejemplo, Google Analytics. All\u00ed podr\u00e1 crear informes personalizados que le muestren a qu\u00e9 hora del d\u00eda tiene menos tr\u00e1fico, as\u00ed como identificar las horas punta en las que definitivamente no deber\u00eda hacer ning\u00fan cambio. Adem\u00e1s de mirar la hora del d\u00eda, tambi\u00e9n puede valer la pena mirar c\u00f3mo se reparte la actividad de los usuarios entre los d\u00edas de la semana. Este an\u00e1lisis es muy bueno, pero a menudo acabar\u00e1 con la misma respuesta: Deber\u00eda publicar los cambios durante la noche. Y aunque esto podr\u00eda parecer una gran idea si s\u00f3lo nos fij\u00e1ramos en esta cuesti\u00f3n, es importante que tambi\u00e9n tengamos en cuenta la siguiente.","title":"\u00bfCu\u00e1ndo tiene el menor n\u00famero de usuarios activos?"},{"location":"T3/ServAplic/#hay-alguien-despierto-y-preparado-para-solucionar-posibles-problemas-en-ese-momento","text":"Si la respuesta es no, entonces desplegar los cambios en mitad de la noche podr\u00eda no ser la mejor idea. En su lugar, deber\u00edas identificar las franjas horarias en las que puedas encontrar el mejor equilibrio entre el n\u00famero de usuarios activos y los desarrolladores dispuestos a solucionar los problemas. Esto variar\u00e1 mucho dependiendo de tu proyecto y de tu equipo, pero en general, deber\u00edas ser capaz de encontrar algunas opciones. Y si ya tienes un horario fijo de despliegue, incluso puedes convencer a tu equipo de que est\u00e9 listo a horas extra\u00f1as del d\u00eda. Es mucho m\u00e1s f\u00e1cil convencer a alguien de que venga unas horas antes si sabe que s\u00f3lo ocurre una vez cada ciclo o sprint. Info Aunque no hay un momento perfecto para el despliegue, definitivamente hay momentos que son mejores que otros.","title":"\u00bfHay alguien despierto y preparado para solucionar posibles problemas en ese momento?"},{"location":"T3/ServAplic/#cuales-son-las-ventajas-del-despliegue-y-de-los-entornos-multiples","text":"","title":"\u00bfCu\u00e1les son las ventajas del despliegue y de los entornos m\u00faltiples?"},{"location":"T3/ServAplic/#reduccion-del-riesgo-de-romper-un-sitio-web-en-produccion","text":"Una de las principales razones para utilizar m\u00faltiples entornos y confiar en el despliegue es reducir el riesgo de que los cambios tengan un impacto negativo en un sitio web en vivo. Mientras que los cambios menores se pueden hacer f\u00e1cilmente directamente en un sitio web en vivo, los cambios m\u00e1s grandes se pueden hacer en entornos separados sin el riesgo de romper nada en el entorno en vivo. Tener varios usuarios trabajando en el mismo sitio web tambi\u00e9n garantiza que nadie se arriesgue a romper algo debido a los cambios de otro usuario.","title":"Reducci\u00f3n del riesgo de romper un sitio web en producci\u00f3n"},{"location":"T3/ServAplic/#ahorro-de-tiempo","text":"Sin la preocupaci\u00f3n de romper algo en un sitio web en vivo, puede realizar los cambios en el orden que prefiera. Esto significa que puedes optimizar tu flujo de trabajo para realizar los cambios sin tener en cuenta el aspecto o el funcionamiento del sitio web mientras lo haces. Si trabajas en un entorno local tambi\u00e9n tienes la ventaja de que los cambios se procesan m\u00e1s r\u00e1pido y no dependes de ning\u00fan problema de conectividad. A la hora de desplegar los cambios, tambi\u00e9n ahorrar\u00e1s tiempo, ya que podr\u00e1s realizar todos los cambios al mismo tiempo en lugar de tener que hacerlo en varios pasos m\u00e1s peque\u00f1os.","title":"Ahorro de tiempo"},{"location":"T3/ServAplic/#el-contenido-sensible-al-tiempo-es-mas-facil-de-gestionar","text":"Si est\u00e1 llevando a cabo campa\u00f1as que son sensibles al tiempo y que s\u00f3lo pueden ponerse en marcha a partir de un determinado d\u00eda u hora, entonces la ejecuci\u00f3n de m\u00faltiples entornos y el uso del despliegue pueden ahorrarle una gran cantidad de estr\u00e9s. Al crear todo el contenido en un entorno de puesta en escena (o similar) puedes terminar tu campa\u00f1a sin preocuparte de que sea visible para tus usuarios. Y cuando llegue el momento de lanzarla, podr\u00e1 hacerla visible en muy poco tiempo despleg\u00e1ndola en su entorno real. Y si la herramienta de despliegue incluye roles de usuario con configuraci\u00f3n de permisos, es posible que un editor de contenidos haga todo esto -incluyendo el despliegue de los cambios- sin involucrar a un desarrollador en el proceso.","title":"El contenido sensible al tiempo es m\u00e1s f\u00e1cil de gestionar"},{"location":"T3/ServAplic/#referencias","text":"What is an application server? (I) What is an application server? (II) What is deployment in software and web development","title":"Referencias"}]}